// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package squareTest

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CalculatorClient is the client API for Calculator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CalculatorClient interface {
	// Sends a greeting
	Square(ctx context.Context, in *SquareNumber, opts ...grpc.CallOption) (*SquareReply, error)
	ListFeatures(ctx context.Context, in *SquareNumber, opts ...grpc.CallOption) (Calculator_ListFeaturesClient, error)
	Chat(ctx context.Context, opts ...grpc.CallOption) (Calculator_ChatClient, error)
	MapLog(ctx context.Context, opts ...grpc.CallOption) (Calculator_MapLogClient, error)
}

type calculatorClient struct {
	cc grpc.ClientConnInterface
}

func NewCalculatorClient(cc grpc.ClientConnInterface) CalculatorClient {
	return &calculatorClient{cc}
}

func (c *calculatorClient) Square(ctx context.Context, in *SquareNumber, opts ...grpc.CallOption) (*SquareReply, error) {
	out := new(SquareReply)
	err := c.cc.Invoke(ctx, "/Calculator.Calculator/Square", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calculatorClient) ListFeatures(ctx context.Context, in *SquareNumber, opts ...grpc.CallOption) (Calculator_ListFeaturesClient, error) {
	stream, err := c.cc.NewStream(ctx, &Calculator_ServiceDesc.Streams[0], "/Calculator.Calculator/ListFeatures", opts...)
	if err != nil {
		return nil, err
	}
	x := &calculatorListFeaturesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Calculator_ListFeaturesClient interface {
	Recv() (*SquareReply, error)
	grpc.ClientStream
}

type calculatorListFeaturesClient struct {
	grpc.ClientStream
}

func (x *calculatorListFeaturesClient) Recv() (*SquareReply, error) {
	m := new(SquareReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *calculatorClient) Chat(ctx context.Context, opts ...grpc.CallOption) (Calculator_ChatClient, error) {
	stream, err := c.cc.NewStream(ctx, &Calculator_ServiceDesc.Streams[1], "/Calculator.Calculator/Chat", opts...)
	if err != nil {
		return nil, err
	}
	x := &calculatorChatClient{stream}
	return x, nil
}

type Calculator_ChatClient interface {
	Send(*CheetMsg) error
	CloseAndRecv() (*CheetRespond, error)
	grpc.ClientStream
}

type calculatorChatClient struct {
	grpc.ClientStream
}

func (x *calculatorChatClient) Send(m *CheetMsg) error {
	return x.ClientStream.SendMsg(m)
}

func (x *calculatorChatClient) CloseAndRecv() (*CheetRespond, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(CheetRespond)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *calculatorClient) MapLog(ctx context.Context, opts ...grpc.CallOption) (Calculator_MapLogClient, error) {
	stream, err := c.cc.NewStream(ctx, &Calculator_ServiceDesc.Streams[2], "/Calculator.Calculator/MapLog", opts...)
	if err != nil {
		return nil, err
	}
	x := &calculatorMapLogClient{stream}
	return x, nil
}

type Calculator_MapLogClient interface {
	Send(*MapLogDate) error
	Recv() (*MapLogDate, error)
	grpc.ClientStream
}

type calculatorMapLogClient struct {
	grpc.ClientStream
}

func (x *calculatorMapLogClient) Send(m *MapLogDate) error {
	return x.ClientStream.SendMsg(m)
}

func (x *calculatorMapLogClient) Recv() (*MapLogDate, error) {
	m := new(MapLogDate)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CalculatorServer is the server API for Calculator service.
// All implementations must embed UnimplementedCalculatorServer
// for forward compatibility
type CalculatorServer interface {
	// Sends a greeting
	Square(context.Context, *SquareNumber) (*SquareReply, error)
	ListFeatures(*SquareNumber, Calculator_ListFeaturesServer) error
	Chat(Calculator_ChatServer) error
	MapLog(Calculator_MapLogServer) error
	mustEmbedUnimplementedCalculatorServer()
}

// UnimplementedCalculatorServer must be embedded to have forward compatible implementations.
type UnimplementedCalculatorServer struct {
}

func (UnimplementedCalculatorServer) Square(context.Context, *SquareNumber) (*SquareReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Square not implemented")
}
func (UnimplementedCalculatorServer) ListFeatures(*SquareNumber, Calculator_ListFeaturesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListFeatures not implemented")
}
func (UnimplementedCalculatorServer) Chat(Calculator_ChatServer) error {
	return status.Errorf(codes.Unimplemented, "method Chat not implemented")
}
func (UnimplementedCalculatorServer) MapLog(Calculator_MapLogServer) error {
	return status.Errorf(codes.Unimplemented, "method MapLog not implemented")
}
func (UnimplementedCalculatorServer) mustEmbedUnimplementedCalculatorServer() {}

// UnsafeCalculatorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CalculatorServer will
// result in compilation errors.
type UnsafeCalculatorServer interface {
	mustEmbedUnimplementedCalculatorServer()
}

func RegisterCalculatorServer(s grpc.ServiceRegistrar, srv CalculatorServer) {
	s.RegisterService(&Calculator_ServiceDesc, srv)
}

func _Calculator_Square_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SquareNumber)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculatorServer).Square(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Calculator.Calculator/Square",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculatorServer).Square(ctx, req.(*SquareNumber))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calculator_ListFeatures_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SquareNumber)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CalculatorServer).ListFeatures(m, &calculatorListFeaturesServer{stream})
}

type Calculator_ListFeaturesServer interface {
	Send(*SquareReply) error
	grpc.ServerStream
}

type calculatorListFeaturesServer struct {
	grpc.ServerStream
}

func (x *calculatorListFeaturesServer) Send(m *SquareReply) error {
	return x.ServerStream.SendMsg(m)
}

func _Calculator_Chat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CalculatorServer).Chat(&calculatorChatServer{stream})
}

type Calculator_ChatServer interface {
	SendAndClose(*CheetRespond) error
	Recv() (*CheetMsg, error)
	grpc.ServerStream
}

type calculatorChatServer struct {
	grpc.ServerStream
}

func (x *calculatorChatServer) SendAndClose(m *CheetRespond) error {
	return x.ServerStream.SendMsg(m)
}

func (x *calculatorChatServer) Recv() (*CheetMsg, error) {
	m := new(CheetMsg)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Calculator_MapLog_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CalculatorServer).MapLog(&calculatorMapLogServer{stream})
}

type Calculator_MapLogServer interface {
	Send(*MapLogDate) error
	Recv() (*MapLogDate, error)
	grpc.ServerStream
}

type calculatorMapLogServer struct {
	grpc.ServerStream
}

func (x *calculatorMapLogServer) Send(m *MapLogDate) error {
	return x.ServerStream.SendMsg(m)
}

func (x *calculatorMapLogServer) Recv() (*MapLogDate, error) {
	m := new(MapLogDate)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Calculator_ServiceDesc is the grpc.ServiceDesc for Calculator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Calculator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Calculator.Calculator",
	HandlerType: (*CalculatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Square",
			Handler:    _Calculator_Square_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListFeatures",
			Handler:       _Calculator_ListFeatures_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Chat",
			Handler:       _Calculator_Chat_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "MapLog",
			Handler:       _Calculator_MapLog_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "square.proto",
}
